// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  decks         Deck[]
  cards         Card[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model Deck {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  name   String
  cards  Card[]
  User   User   @relation(fields: [userId], references: [id])
  userId String

  @@map(name: "decks")
}

model Card {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  front      String?
  back       String?
  Deck       Deck?       @relation(fields: [deckId], references: [id])
  deckId     String?
  User       User           @relation(fields: [userId], references: [id])
  userId     String
  Assignment Assignment?
  reviews    Review[]

  @@map(name: "cards")
}

model Assignment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  availableAt DateTime?
  Card        Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId      String       @unique
  started_at  DateTime?
  srsStage    Int       @default(1)
  hidden      Boolean   @default(false)
  Reviews     Review[]

  @@map(name: "assignments")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  Assignment       Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId     String
  Card             Card       @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId           String
  startingSrsStage Int
  endingSrsStage   Int
  incorrectAnswers Int

  @@map(name: "reviews")
}
